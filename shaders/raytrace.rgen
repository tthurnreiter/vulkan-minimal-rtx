//This file contains the ray generation shader that is called exactly once for every pixel in the image

#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#include "../src/common.h"
#include "shaderCommon.h"

#ifdef DEBUG
#extension GL_EXT_debug_printf : require
#endif //DEBUG

//layout(binding = BINDING_IMAGE, set = 0, rgba32f) uniform image2D storageImage;
layout(binding = BINDING_TLAS, set = 0) uniform accelerationStructureEXT tlas;
layout(binding = BINDING_RAYS, set = 0, scalar) buffer Rays
{
  Ray rays[];
};
layout(binding = BINDING_VERTICES, set = 0, scalar) buffer Vertices
{
  float vertices[];
};
layout(binding = BINDING_INDICES, set = 0, scalar) buffer Indices
{
  uint indices[];
};
layout(binding = BINDING_RESULTS, set = 0, scalar) buffer Results{
  RaytraceResult results[];
};

layout(push_constant) uniform PushConsts
{
  PushConstants pushConstants;
};

layout(location = 0) rayPayloadEXT RayPayload pld;  //ray payload that gets sent with the ray to hit/miss shaders

void main()
{
  //get image resolution and which pixel this shader works on
  const ivec2 resolution = ivec2(pushConstants.resolutionX, pushConstants.resolutionY);
  const ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);
 
  //get ray data
  int idx = pixel.x + (pixel.y*resolution.y);
  vec3 rayO = vec3(rays[idx].o.x, rays[idx].o.y, rays[idx].o.z);
  vec3 rayDir = vec3(rays[idx].d.x, rays[idx].d.y, rays[idx].d.z);

  float tmax = 10000.0f;

  traceRayEXT(tlas,                 // top level acceleration structure
              gl_RayFlagsOpaqueEXT, // ray flags (all geometry is opaque)
              0xFF,                 // cull mask (0xFF => intersect all objects/instances)
              0,                    // SBT record offset
              0,                    // SBT record stride
              0,                    // miss index
              rayO,                 // ray origin
              0.0,                  // minimum T-value
              rayDir,               // ray direction
              tmax,                 // maximum T-value
              0);                   //location of ray payload

  RaytraceResult res;
  res.hitT = pld.hitT;
  res.rayHitSky = pld.rayHitSky;
  res.hitID = pld.hitID;
  res.hitBeta = pld.hitBeta;
  res.hitGamma = pld.hitGamma;
  results[idx] = res;
}